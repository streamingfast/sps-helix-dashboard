// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { BatchSpotExecution } from "./BatchSpotExecution";
import { CreateCampaign } from "./CreateCampaign";
import { CreateRound } from "./CreateRound";
import { UpdateCampaign } from "./UpdateCampaign";
import { UpdateRound } from "./UpdateRound";

export class Event {
  static encode(message: Event, writer: Writer): void {
    const eventBatchSpotExecution = message.eventBatchSpotExecution;
    if (eventBatchSpotExecution !== null) {
      writer.uint32(10);
      writer.fork();
      BatchSpotExecution.encode(eventBatchSpotExecution, writer);
      writer.ldelim();
    }

    const createCampaign = message.createCampaign;
    if (createCampaign !== null) {
      writer.uint32(18);
      writer.fork();
      CreateCampaign.encode(createCampaign, writer);
      writer.ldelim();
    }

    const createRound = message.createRound;
    if (createRound !== null) {
      writer.uint32(26);
      writer.fork();
      CreateRound.encode(createRound, writer);
      writer.ldelim();
    }

    const updateCampaign = message.updateCampaign;
    if (updateCampaign !== null) {
      writer.uint32(34);
      writer.fork();
      UpdateCampaign.encode(updateCampaign, writer);
      writer.ldelim();
    }

    const updateRound = message.updateRound;
    if (updateRound !== null) {
      writer.uint32(42);
      writer.fork();
      UpdateRound.encode(updateRound, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Event {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Event();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.eventBatchSpotExecution = BatchSpotExecution.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.createCampaign = CreateCampaign.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.createRound = CreateRound.decode(reader, reader.uint32());
          break;

        case 4:
          message.updateCampaign = UpdateCampaign.decode(
            reader,
            reader.uint32()
          );
          break;

        case 5:
          message.updateRound = UpdateRound.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  eventBatchSpotExecution: BatchSpotExecution | null;
  createCampaign: CreateCampaign | null;
  createRound: CreateRound | null;
  updateCampaign: UpdateCampaign | null;
  updateRound: UpdateRound | null;

  constructor(
    eventBatchSpotExecution: BatchSpotExecution | null = null,
    createCampaign: CreateCampaign | null = null,
    createRound: CreateRound | null = null,
    updateCampaign: UpdateCampaign | null = null,
    updateRound: UpdateRound | null = null
  ) {
    this.eventBatchSpotExecution = eventBatchSpotExecution;
    this.createCampaign = createCampaign;
    this.createRound = createRound;
    this.updateCampaign = updateCampaign;
    this.updateRound = updateRound;
  }
}
