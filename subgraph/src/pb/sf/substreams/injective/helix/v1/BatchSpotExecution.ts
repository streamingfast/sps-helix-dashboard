// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { Trade } from "./Trade";

export class BatchSpotExecution {
  static encode(message: BatchSpotExecution, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.marketId);

    const trades = message.trades;
    for (let i: i32 = 0; i < trades.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Trade.encode(trades[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): BatchSpotExecution {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BatchSpotExecution();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.marketId = reader.string();
          break;

        case 2:
          message.trades.push(Trade.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  marketId: string;
  trades: Array<Trade>;

  constructor(marketId: string = "", trades: Array<Trade> = []) {
    this.marketId = marketId;
    this.trades = trades;
  }
}
